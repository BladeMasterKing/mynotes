= Semantic UI
BladeMasterKing <wangjiansheng@hotmail.com>
v1.0 , 2019-10-28
:toc:

== 1 遮罩层

=== 1.1 用法
[%hardbreaks]
如果元素不存在遮罩层，将会先创建遮罩层
如果遮罩层已存在，将会展开
$("element").dimmer("show");
$("element").dimmer("hide");
$('h4').dimmer('toggle'); // 遮罩层toggle方式展开

=== 1.2 行为
表格中的行为参数都可以通过以下的语法来调用:
[source,javascript]
----
$(".custom.element").dimmer("behavior name", argument1, argument2);
----

.表格Behavior参数
|===
|Behavior|描述

|add content(html)
|将指定的html元素从 *DOM* 脱离，并重新连接到 *dimmer* 里

|show
|展示dimmer

|hide
|隐藏dimmer

|toggle
|切换当前dimmer的可见性，集show与hide于一身

|set opacity(opacity)
|设置遮罩层的不透明度

|create
|在可遮罩的上下文创建一个新的dimmer

|get duration
|返回当前展示或隐藏时间可见性的持续时间

|get dimmer
|返回dimmer的DOM元素

|has dimmer
|返回当前元素是否存在一个dimmer

|is actice
|当前dimmer是否是展示的

|is animating
|dimmer是否正在执行动画

|is dimmable
|当前元素是否是可遮罩的部分

|is dimmmer
|当前元素是否是一个dimmer

|is disabled
|dimmer是否是不可用的

|is enabled
|dimmer是否可用

|is page
|可遮罩部分是否是html的整个 *body*

|is page  dimmer
|dimmer是否是一个整个页面的dimmer

|set active
|设置页面级dimmer状态是活跃的(展示)

|set dimmable
|设置一个元素是可遮罩的

|set dimmed
|设置一个元素dimmer的内容 ?

|set page dimmer
|设置当前dimmer作为页面级的dimmer

|set disabled
|设置一个dimmer不可用
|===


=== 1.3 选项
.dimmer创建的行为选项
|===
|参数名 |默认值 |描述

|useFlex
|true
|dimmer是否应该使用flex或legacy布局

|variation
|false
|指定自动生成dimmer时添加的一个变量，例如 *inverted*

|dimmerName
|false
|如果初始化在一个元素上初始化一个dimmer，可以使用 *dimmerName* 来区分该元素上的多个dimmer

|closable
|auto
|是否点击dimmer应该关闭(只有当设置 *settings.on* 不是 *hover* 才生效)

|on
|false
|设置元素触发dimmer的方式( *hover*, *click*)

|useCSS
|true
|是否使用 *CSS* 过渡

|duration
|duration:{
    show:500;
    hide:500
}
|dimmer动画的持续时间，会应用到dimmer的展示和隐藏动画上，单位毫秒

|transition
|Fade
|dimmer的动画特效，semantic-ui的动画(Scale,Zoom,Fade,Flip,Drop,Fly,Swing,Browse,Slide)
|===
.回调方法
|===
|方法名 |描述

|onShow
|当dimmer展示时触发

|onHide
|当dimmer隐藏时触发

|onChange
|当dimmer显示或隐藏时触发
|===

== 2 动画
=== 2.1 用法
* 缩放
[source]
----
$('.autumn.leaf').transition('scale');
----
* 快速缩放
[source]
----
$('.autumn.leaf').transition('zoom');
----
* 淡入淡出
[source]
----
$('.autumn.leaf').transition('fade');
$('.autumn.leaf').transition('fade up');
$('.autumn.leaf').transition('fade down');
$('.autumn.leaf').transition('fade left');
$('.autumn.leaf').transition('fade right');
----
* 快速翻转
[source]
----
$('.autumn.leaf').transition('horizontal flip');
$('.autumn.leaf').transition('vertical flip');
----
* 下落
[source]
----
$('.autumn.leaf').transition('drop');
----
* 飞入
[source]
----
$('.autumn.leaf').transition('fly left');
$('.autumn.leaf').transition('fly right');
$('.autumn.leaf').transition('fly up');
$('.autumn.leaf').transition('fly down');
----
* 旋转
[source]
----
$('.autumn.leaf').transition('swing left');
$('.autumn.leaf').transition('swing right');
$('.autumn.leaf').transition('swing up');
$('.autumn.leaf').transition('swing down');
----
* 浏览
[source]
----
$('.autumn.leaf').transition('browse');
$('.autumn.leaf').transition('browse right');
----
* 滑动
[source]
----
$('.autumn.leaf').transition('slide down');
$('.autumn.leaf').transition('slide up');
$('.autumn.leaf').transition('slide left');
$('.autumn.leaf').transition('slide right');
----

*静态动画*

* 抖动
[source]
----
$('.autumn.leaf').transition('jiggle');
----
* 闪烁
[source]
----
$('.autumn.leaf').transition('flash');
----
* 摇晃
[source]
----
$('.autumn.leaf').transition('shake');
----
* 脉冲
[source]
----
$('.autumn.leaf').transition('pulse');
----
* Tada
[source]
----
$('.autumn.leaf').transition('tada');
----
* 弹跳
[source]
----
$('.autumn.leaf').transition('bounce');
----
* 发光
[source]
----
$('.autumn.leaf').transition('glow');
----

*指定方向*
[source]
----
$('.long.leaf.image')
.transition('horizontal flip in')
.transition('vertical flip in');
----
如果未指定动画方向，则将根据元素的当前可见性自动确定该方向。
[source]
----
$('.long.leaf.image')
.transition('fade up')
.transition('fade up');
----
*动画时间间隔*

在组中设置多个不同项的动画时，可能需要使用间隔，以便每个项连续显示。
[source]
----
$('.jiggle.images .image')
.transition({
    animation : 'jiggle',
    duration  : 800,
    interval  : 200
});
----
*动画顺序*
[source]
----
$('.sequenced.images .image')
.transition({
    animation : 'scale',
    reverse   : 'auto', // default setting
    interval  : 200
});
----
*强制顺序*
[source]
----
$('.reverse.images .image')
.transition({
    animation : 'pulse',
    reverse   : true,
    interval  : 200
});
----
*循环*
[source]
----
$('.long.leaf.image')
.transition('set looping')
.transition('bounce', '2000ms');

$('.long.leaf.image')
.transition('remove looping');
----
=== 2.2 行为
下面是调用动画行为的语法
[source,javascript]
----
$(".custom.element").transition("behavior name", argument1, argument2);
----

|===
|参数 |描述

|stop
|停止当前动画并且保留队列

|stop all
|停止当前动画和队列中的动画

|clear queue
|清除队列中的所有动画

|show
|停止当前动画并展示元素

|hide
|停止当前动画并隐藏元素

|toggle
|切换元素显示和隐藏

|force repaint
|强制使用更昂贵但是稳定的方法重排页面

|repaint
|触发元素回流

|reset
|重置所有条件在动画执行期间

|set looping
|允许动画循环

|remove looping
|移除元素的循环执行的状态

|disable
|设置不可用状态(动画不可见)

|enable
|动画可用

|set duration(duration)
|修改元素的动画执行时间

|save conditions
|将所有的class和样式缓存用来在动画之后重试

|restore conditions
|将缓存的class名和样式添加回元素

|get animation name
|获取动画名称

|get animatioin event
|获取动画事件

|is visible
|元素当前是否可见

|is animation
|当前动画是否正在执行

|is looping
|动画是否循环

|is supported
|动画是否支持
|===
=== 2.3 设置
|===
|参数 |默认值 |描述

|animation
|fade
|动画事件的名称

|interval
|0
|每个元素之间执行动画的时间间隔

|reverse
|auto
|设置时间间隔后，设置动画的顺序。

|displayType
|false
|指定展示类型(block,inline-block ...)

|duration
|500ms
|动画的执行时间

|useFailSafe
|true
|如果启用，超时时间将会添加到动画回调发生

|allowRepeats
|false
|如果启用，将允许相同的动画在已经发生时排队

|queue
|true
|发生另一个动画时是否自动排队
|===

*回调*
|===
|参数 |描述
|onShow |每个动画改变可见性是展示的时候触发
|onHide |每个动画改变可见性是隐藏的时候触发
|onStart | 动画开始时触发，对于排队的动画非常有用
|onComplete | 每一个动画都完成时触发